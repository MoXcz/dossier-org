// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dossier.sql

package database

import (
	"context"
	"encoding/json"
)

const createDossier = `-- name: CreateDossier :one
INSERT INTO dossiers (title, data, assigned_to)
VALUES (
    $1,
    $2,
    $3
)
RETURNING dossier_id, title, data, assigned_to, created_at
`

type CreateDossierParams struct {
	Title      string          `json:"title"`
	Data       json.RawMessage `json:"data"`
	AssignedTo int64           `json:"assigned_to"`
}

func (q *Queries) CreateDossier(ctx context.Context, arg CreateDossierParams) (Dossier, error) {
	row := q.db.QueryRowContext(ctx, createDossier, arg.Title, arg.Data, arg.AssignedTo)
	var i Dossier
	err := row.Scan(
		&i.DossierID,
		&i.Title,
		&i.Data,
		&i.AssignedTo,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDossier = `-- name: DeleteDossier :exec
DELETE FROM dossiers
`

func (q *Queries) DeleteDossier(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteDossier)
	return err
}

const getDossiers = `-- name: GetDossiers :many
SELECT dossier_id, title, data, assigned_to, created_at from dossiers
`

func (q *Queries) GetDossiers(ctx context.Context) ([]Dossier, error) {
	rows, err := q.db.QueryContext(ctx, getDossiers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dossier
	for rows.Next() {
		var i Dossier
		if err := rows.Scan(
			&i.DossierID,
			&i.Title,
			&i.Data,
			&i.AssignedTo,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDossiersFromUserID = `-- name: GetDossiersFromUserID :many
SELECT dossier_id, title, data, assigned_to, created_at FROM dossiers
WHERE assigned_to = $1
`

func (q *Queries) GetDossiersFromUserID(ctx context.Context, assignedTo int64) ([]Dossier, error) {
	rows, err := q.db.QueryContext(ctx, getDossiersFromUserID, assignedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dossier
	for rows.Next() {
		var i Dossier
		if err := rows.Scan(
			&i.DossierID,
			&i.Title,
			&i.Data,
			&i.AssignedTo,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
