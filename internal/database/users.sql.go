// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, encryptedPassword)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id, name, email, encryptedpassword
`

type CreateUserParams struct {
	Name              string `json:"name"`
	Email             string `json:"email"`
	Encryptedpassword string `json:"encryptedpassword"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.Encryptedpassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Encryptedpassword,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUserFromID = `-- name: GetUserFromID :one
SELECT id, name, email, encryptedpassword FROM users
WHERE id = $1
`

func (q *Queries) GetUserFromID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Encryptedpassword,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, email, encryptedpassword from users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Encryptedpassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
