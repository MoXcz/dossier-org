// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles.sql

package database

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, description)
VALUES (
    $1,
    $2
)
RETURNING role_id, name, description
`

type CreateRoleParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(&i.RoleID, &i.Name, &i.Description)
	return i, err
}

const deleteRoles = `-- name: DeleteRoles :exec
TRUNCATE roles RESTART IDENTITY
`

func (q *Queries) DeleteRoles(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteRoles)
	return err
}

const getRoleFromID = `-- name: GetRoleFromID :one
SELECT user_id, name, email, password_hash, role_id FROM users
WHERE user_id = $1
`

func (q *Queries) GetRoleFromID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getRoleFromID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.RoleID,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT role_id, name, description from roles
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.RoleID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
